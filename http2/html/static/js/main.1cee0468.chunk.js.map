{"version":3,"sources":["component/Child/Child.tsx","component/App/App.tsx","serviceWorker.jsx","index.tsx"],"names":["Child","console","log","useState","count","setCount","useEffect","element","onClick","previousCount","App","showChild","setShowChild","type","checked","onChange","e","target","style","padding","margin","height","width","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JAEaA,EAAa,WACtBC,QAAQC,IAAI,2BAA4B,4BADZ,MAGFC,oBAAS,WAE/B,OADAF,QAAQC,IAAI,iCAAkC,iBACvC,KALiB,mBAGrBE,EAHqB,KAGdC,EAHc,KAQ5BC,qBAAU,WAEN,OADAL,QAAQC,IAAI,iCAAkC,qBACvC,WACHD,QAAQC,IAAI,yCAA0C,yBAI9DI,qBAAU,WAEN,OADAL,QAAQC,IAAI,oCAAqC,0BAC1C,WACHD,QAAQC,IAAI,4CAA6C,6BAE9D,IAEHI,qBAAU,WAEN,OADAL,QAAQC,IAAI,kCAAmC,kBACxC,WACHD,QAAQC,IAAI,0CAA2C,qBAE5D,CAACE,IAEJ,IAAMG,EACF,4BAAQC,QAAS,kBAAMH,GAAS,SAAAI,GAAa,OAAIA,EAAgB,OAC5DL,GAMT,OAFAH,QAAQC,IAAI,yBAA0B,4BAE/BK,GCnCEG,G,KAAW,WACtBT,QAAQC,IAAI,sBAAuB,4BADP,MAGMC,oBAAS,WAEzC,OADAF,QAAQC,IAAI,2BAA4B,kBACjC,KALmB,mBAGrBS,EAHqB,KAGVC,EAHU,KAQ5BN,qBAAU,WAER,OADAL,QAAQC,IAAI,2BAA4B,qBACjC,WACLD,QAAQC,IAAI,mCAAoC,yBAIpDI,qBAAU,WAER,OADAL,QAAQC,IAAI,8BAA+B,0BACpC,WACLD,QAAQC,IAAI,sCAAuC,6BAEpD,IAEHI,qBAAU,WAER,OADAL,QAAQC,IAAI,4BAA6B,kBAClC,WACLD,QAAQC,IAAI,oCAAqC,qBAElD,CAACS,IAEJ,IAAMJ,EACJ,oCACE,+BACE,2BACEM,KAAK,WACLC,QAASH,EACTI,SAAW,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,OAAOH,YACrC,IALL,cAQA,yBACEI,MAAO,CACLC,QAAS,EACTC,OAAQ,EACRC,OAAQ,GACRC,MAAO,GACPC,OAAQ,UAEPZ,EAAY,kBAAC,EAAD,MAAY,OAQjC,OAFAV,QAAQC,IAAI,oBAAqB,4BAE1BK,IC/CWiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.1cee0468.chunk.js","sourcesContent":["import React, { useState, useEffect, FC } from 'react';\n\nexport const Child : FC = () => {\n    console.log('%c    Child render start', 'color: MediumSpringGreen');\n\n    const [count, setCount] = useState(() => {\n        console.log('%c    Child: useState callback', 'color: tomato');\n        return 0;\n    });\n\n    useEffect(() => {\n        console.log('%c    Child: useEffect no deps', 'color: lightCoral');\n        return () => {\n            console.log('%c    Child: useEffect no deps cleanup', 'color: lightCoral');\n        }\n    });\n\n    useEffect(() => {\n        console.log('%c    Child: useEffect empty deps', 'color: MediumTurquoise');\n        return () => {\n            console.log('%c    Child: useEffect empty deps cleanup', 'color: MediumTurquoise');\n        }\n    }, []);\n\n    useEffect(() => {\n        console.log('%c    Child: useEffect with dep', 'color: HotPink');\n        return () => {\n            console.log('%c    Child: useEffect with dep cleanup', 'color: HotPink');\n        }\n    }, [count]);\n\n    const element = (\n        <button onClick={() => setCount(previousCount => previousCount + 1)}>\n            {count}\n        </button>\n    );\n\n    console.log('%c    Child render end', 'color: MediumSpringGreen');\n\n    return element;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { Child } from '../Child/';\nimport './App.css';\n\nexport const App : FC = () => {\n  console.log('%cApp: render start', 'color: MediumSpringGreen');\n\n  const [showChild, setShowChild] = useState(() => {\n    console.log('%cApp: useState callback', 'color: tomato');\n    return true;\n  });\n\n  useEffect(() => {\n    console.log('%cApp: useEffect no deps', 'color: LightCoral');\n    return () => {\n      console.log('%cApp: useEffect no deps cleanUp', 'color: LightCoral');\n    }\n  });\n\n  useEffect(() => {\n    console.log('%cApp: useEffect empty deps', 'color: MediumTurquoise');\n    return () => {\n      console.log('%cApp: useEffect empty deps cleanUp', 'color: MediumTurquoise');\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('%cApp: useEffect with dep', 'color: HotPink');\n    return () => {\n      console.log('%cApp: useEffect with dep cleanUp', 'color: HotPink');\n    }\n  }, [showChild]);\n\n  const element = (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={showChild}\n          onChange={ e => setShowChild(e.target.checked)} />\n          {' '}\n          show child\n      </label>\n      <div\n        style={{\n          padding: 0,\n          margin: 0,\n          height: 90,\n          width: 90,\n          border: 'solid',\n        }} >\n          {showChild ? <Child /> : null}\n        </div>\n    </>\n  );\n\n\n  console.log('%cApp: render end', 'color: MediumSpringGreen');\n\n  return element;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}